
package project_AO;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;


public  class moto6809 extends javax.swing.JFrame implements ActionListener{

            tableau T = new tableau();
            ROM ROM = new ROM();
                     static int cpt=0 ;
                     int I=1 , J=1 , oui =0,Imax , Jmax ;
   
    public moto6809() {
        initComponents();
        scaleImage();
       // jTextField2.addActionListener(this);
       
    }

    public JTextField gettexty() {
        return texty;
    }

    public JTextField gettextdp() {
        return textdp;
    }

    public JTextField getjTextField14() {
        return jTextField14;
    }

    public JTextField gettextu() {
        return textu;
    }

    public JTextField gettexts() {
        return texts;
    }

    public JTextField gettext_instruct() {
        return text_instruct;
    }

    public JTextField gettextx() {
        return textx;
    }

    public JTextField getjTextField4() {
        return flags;
    }

    public JTextField getpc() {
        return pc;
    }

    public JTextField getjTextField12() {
        return jTextField12;
    }
    
     public JTextField getFlags() {
        return flags;
    }
    
    public  void scaleImage()
    {
        ImageIcon icon = new ImageIcon(".\\src\\main\\java\\project_AO\\glow.png");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(360, 140,120);
        ImageIcon ScaledIcon = new ImageIcon(imgScale);
        jLabel9.setIcon(ScaledIcon);
        
        ImageIcon icon2 = new ImageIcon(".\\src\\main\\java\\project_AO\\run2.jpg.png");
        Image img2 = icon2.getImage();
        Image imgScale2 = img2.getScaledInstance(20, 20,10);
        ImageIcon ScaledIcon2 = new ImageIcon(imgScale2);
        jButton3.setIcon(ScaledIcon2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        text_instruct = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textx = new javax.swing.JTextField();
        flags = new javax.swing.JTextField();
        pc = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        texty = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textu = new javax.swing.JTextField();
        texts = new javax.swing.JTextField();
        textdp = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        adaam = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        EXECUTE = new javax.swing.JButton();
        retry = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jInternalFrame1.setBackground(new java.awt.Color(153, 153, 153));
        jInternalFrame1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.white, java.awt.Color.black, java.awt.Color.white));
        jInternalFrame1.setClosable(true);
        jInternalFrame1.setForeground(new java.awt.Color(102, 0, 102));
        jInternalFrame1.setMaximizable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Architecture interne");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setVisible(true);
        jInternalFrame1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("PC");
        jInternalFrame1.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, -1));

        text_instruct.setEditable(false);
        text_instruct.setBackground(new java.awt.Color(102, 102, 102));
        text_instruct.setFont(new java.awt.Font("Gloucester MT Extra Condensed", 1, 24)); // NOI18N
        text_instruct.setForeground(new java.awt.Color(51, 51, 51));
        text_instruct.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        text_instruct.setText("ORG $FC00");
        text_instruct.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        text_instruct.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        text_instruct.setFocusTraversalPolicyProvider(true);
        text_instruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_instructActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(text_instruct, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 230, 36));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel2.setText("S");
        jInternalFrame1.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 22, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel3.setText("A");
        jInternalFrame1.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel4.setText("U");
        jInternalFrame1.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel5.setText("DP");
        jInternalFrame1.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel6.setText("B");
        jInternalFrame1.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel8.setText("Y");
        jInternalFrame1.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 370, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel10.setText("X");
        jInternalFrame1.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        textx.setEditable(false);
        textx.setForeground(new java.awt.Color(0, 0, 204));
        textx.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textx.setText("0000");
        textx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textxActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(textx, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 230, 30));

        flags.setEditable(false);
        flags.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        flags.setForeground(new java.awt.Color(0, 0, 204));
        flags.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        flags.setText("00000100");
        flags.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.cyan, java.awt.Color.white));
        flags.setOpaque(true);
        flags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagsActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(flags, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 220, 109, 30));

        pc.setEditable(false);
        pc.setBackground(new java.awt.Color(102, 0, 102));
        pc.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 19)); // NOI18N
        pc.setForeground(new java.awt.Color(255, 255, 255));
        pc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pc.setText("FC00");
        pc.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pc.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        pc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(pc, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 160, 31));

        jTextField12.setEditable(false);
        jTextField12.setForeground(new java.awt.Color(0, 0, 204));
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField12.setText("00");
        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(jTextField12, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 175, 100, 30));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("EFHINZVC"); // NOI18N
        jLabel7.setAlignmentX(2.0F);
        jInternalFrame1.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 249, 100, 40));

        texty.setEditable(false);
        texty.setForeground(new java.awt.Color(0, 0, 204));
        texty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texty.setText("0000");
        texty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textyActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(texty, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 230, 30));

        jTextField14.setEditable(false);
        jTextField14.setForeground(new java.awt.Color(0, 0, 204));
        jTextField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField14.setText("00");
        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(jTextField14, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 266, 100, 30));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jInternalFrame1.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 270, 130));

        textu.setEditable(false);
        textu.setForeground(new java.awt.Color(0, 0, 204));
        textu.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textu.setText("0000");
        textu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textuActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(textu, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 230, 30));

        texts.setEditable(false);
        texts.setForeground(new java.awt.Color(0, 0, 204));
        texts.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texts.setText("0000");
        texts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textsActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(texts, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 230, 30));

        textdp.setEditable(false);
        textdp.setForeground(new java.awt.Color(0, 0, 204));
        textdp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textdp.setText("00");
        textdp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textdpActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(textdp, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, 160, 31));

        getContentPane().add(jInternalFrame1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 700, 450));

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 0, 51));
        jButton1.setText("RAM");
        jButton1.setToolTipText("");
        jButton1.setAutoscrolls(true);
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jButton1.setMargin(new java.awt.Insets(2, 12, 6, 14));
        jButton1.setSelected(true);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 420, 120, 30));

        adaam.setBackground(new java.awt.Color(99, 10, 159));
        adaam.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        adaam.setClosable(true);
        adaam.setForeground(new java.awt.Color(255, 255, 255));
        adaam.setTitle("Programme");
        adaam.setVisible(true);
        adaam.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea2.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jTextArea2.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextArea2.setSelectionColor(new java.awt.Color(255, 255, 51));
        jScrollPane2.setViewportView(jTextArea2);

        adaam.getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 290, 290));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 51, 51));
        jButton3.setText("Run");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        adaam.getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 30));

        EXECUTE.setBackground(java.awt.Color.pink);
        EXECUTE.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        EXECUTE.setForeground(new java.awt.Color(255, 255, 255));
        EXECUTE.setText("BY STEP");
        EXECUTE.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), java.awt.Color.gray, new java.awt.Color(0, 0, 0), java.awt.Color.gray));
        EXECUTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXECUTEActionPerformed(evt);
            }
        });
        adaam.getContentPane().add(EXECUTE, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 60, 30));

        retry.setBackground(new java.awt.Color(255, 255, 255));
        retry.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        retry.setForeground(new java.awt.Color(51, 0, 51));
        retry.setText("RESET");
        retry.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        retry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryActionPerformed(evt);
            }
        });
        adaam.getContentPane().add(retry, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 60, 30));

        back.setBackground(new java.awt.Color(51, 0, 0));
        back.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setText("Back");
        back.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        adaam.getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 60, 30));

        getContentPane().add(adaam, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 310, 390));

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setFont(new java.awt.Font("Perpetua Titling MT", 0, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 0, 51));
        jButton2.setText("ROM");
        jButton2.setToolTipText("");
        jButton2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButton2.setMargin(new java.awt.Insets(2, 14, 6, 14));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 420, 120, 30));

        setSize(new java.awt.Dimension(1135, 506));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void textyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textyActionPerformed

    private void pcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcActionPerformed

    private void flagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flagsActionPerformed

    private void textxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textxActionPerformed

    private void text_instructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_instructActionPerformed
       if (evt.getSource() == text_instruct) {
        String input = text_instruct.getText();
        if (input.equals("ABX")) {
            Instructions I = new Instructions();
        }
    }
    }//GEN-LAST:event_text_instructActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void textuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textuActionPerformed

    private void textsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textsActionPerformed

    private void textdpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textdpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textdpActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        /*T.change(0, 1, 0001);
        T.change(6, 1, 1110);*/
        //jButton1.addActionListener(this);
        int red = 15;
        int green = 87;
        int blue = 18;

        Color customColor = new Color(red, green, blue);
        jButton1.addMouseListener(new MouseAdapter() 
        {
            @Override
            public void mouseExited(MouseEvent e) {  // quand il sort du button
                if (e.getSource() == jButton1) {
                    jButton1.setBackground(customColor);
                }
            }
        });
        T.jframe();
        T.revalidate();
        T.repaint();
        //SwingUtilities.invokeLater(() -> new tableau()); 
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int red = 255;
        int green = 22;
        int blue = 44;

        Color customColor = new Color(red, green, blue);
        jButton2.addMouseListener(new MouseAdapter() 
        {
            @Override
            public void mouseExited(MouseEvent e) {  // quand il sort du button
                if (e.getSource() == jButton2) {
                    jButton2.setBackground(customColor);
                }
            }
        });
        ROM.jframe();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       
            String[][] texte = recupererTexte(jTextArea2);
                Instructions k =new Instructions();
               
            for (int i = 0; i < texte.length; i++) {
                String value = ROM.tableau[cpt][0];
                  getpc().setText(value); 
                for (int j = 0; j < texte[i].length; j++) {
                    System.out.println("T[" + i + "][" + j + "] = " + texte[i][j]);
                    StringBuilder sb = new StringBuilder();

                    for (String item : texte[i]) {
                        sb.append(item);
                        sb.append(" ");
                    }
                    String concatenedString = sb.toString();
                   gettext_instruct().setText(concatenedString);
                   //ROM.tableau[cpt][1]=texte[i][j];          cpt++;
                   
                 if(texte[i][j].equalsIgnoreCase("STA")) 
                        {
                        STA(texte[i][j+1]); 
                        break ;
                        }
                 else if (texte[i][j].equalsIgnoreCase("STB"))
                        {
                        STB(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("STS"))
                        {
                        k.STS(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("STU"))
                        {
                        STU(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("STX"))
                        {
                        STX(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("STY"))
                        {
                        STY(texte[i][j+1]); 
                        break;
                        }
                 else if (texte[i][j].equalsIgnoreCase("STD"))
                        {
                        STD(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LDA"))
                        {
                        LDA(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LDB"))
                        {
                        LDB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ADDA")) 
                        {
                        ADDA(texte[i][j+1]);
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ADDB")) 
                        {
                        ADDB(texte[i][j+1]);
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ANDA")) 
                        {
                        ANDA(texte[i][j+1]);
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ANDB")) 
                        {
                        ANDB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ABX")) 
                        {
                        ABX(); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASLA")) 
                        {
                        ASLA();
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASLB")) 
                        {
                        ASLB();
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASRA")) 
                        {
                        ASRA();
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASRB")) 
                        {
                        ASRB();
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("BITA")) 
                        {
                        BITA(texte[i][j+1]);
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("BITB")) 
                        {
                        BITB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ADCA")) 
                        {
                        ADCA(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ADCB")) 
                        {
                        ADCB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ADDD")) 
                        {
                        ADDD(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASL")) 
                        {
                        ASL(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("ASR")) 
                        {
                        ASR(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("LDB")) 
                        {
                        LDB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("LDX")) 
                        {
                        LDX(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("LDY")) 
                        {
                        LDY(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("LDS")) 
                        {
                        LDS(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("LDD")) 
                        {
                        LDD(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("BEQ"))
                        {
                        if(getFlags().getText().equalsIgnoreCase("00000100"))
                        {
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                             break ;
                         }
                        }
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("CLRA")) 
                        {
                        CLRA(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CLRB")) 
                        {
                        CLRB(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CLR")) 
                        {
                        CLR(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPA")) 
                        {
                        CMPA(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPB")) 
                        {
                        CMPB(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPS")) 
                        {
                        CMPS(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPU")) 
                        {
                        CMPU(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPX")) 
                        {
                        CMPX(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("CMPY")) 
                        {
                        CMPY(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("BMI"))
                        {
                        if(getFlags().getText().equalsIgnoreCase("00001000"))
                        {
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                                                
                             break ;
                             
                         }
                        }
                        break ;
                        }
                
                
                else if(texte[i][j].equalsIgnoreCase("BRA"))
                        {
                        
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                                                
                             break ;
                             
                         }
                        
                        break ;
                        }
                
                
                else if(texte[i][j].equalsIgnoreCase("BPL"))
                        {
                        if(getFlags().getText().equalsIgnoreCase("00000000"))
                        {
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                                                
                             break ;
                             
                         }
                        }
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("BNE"))
                        {
                        if(!getFlags().getText().equalsIgnoreCase("00000100"))
                        {
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                                                
                             break ;
                             
                         }
                        }
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("COMA")) 
                        {
                        COMA(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("COMB")) 
                        {
                        COMB(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("COM")) 
                        {
                        COM(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("DECA")) 
                        {
                        DECA(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("DECB")) 
                        {
                        DECB(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("DEC")) 
                        {
                        DEC(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("EORA")) 
                        {
                        EORA(texte[i][j+1]); 
                        break ;
                        }
                
                
                else if(texte[i][j].equalsIgnoreCase("EORB")) 
                        {
                        EORB(texte[i][j+1]); 
                        break ;
                        }

                else if(texte[i][j].equalsIgnoreCase("EXG")) 
                        {
                        EXG(texte[i][j+1],texte[i][j+3]); 
                        break ;
                        } 
                
                else if(texte[i][j].equalsIgnoreCase("INCA")) 
                        {
                        INCA(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("INCB")) 
                        {
                        INCB(); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("BVS"))
                        {
                        if(!getFlags().getText().equalsIgnoreCase("00000010"))
                        {
                            String y =texte[i][j+1] ; i++;
                            I+=i ; J+=j ;
                         while(!texte[i][0].equalsIgnoreCase(y))
                         {
                             i++;
                         }
                         if(texte[i][0].equalsIgnoreCase(y))
                         {
                             System.out.println("trouver");
                             oui = 1 ;
                             Imax= i ; Jmax =j ;
                                                
                             break ;
                             
                         }
                        }
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("STD")) 
                        {
                        //STD(texte[i][j+1]); 
                        break ;
                        }
                
                else if(texte[i][j].equalsIgnoreCase("SUBD")) 
                        {
                        SUBD(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("SBCA")) 
                        {
                        SBCA(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("SBCB")) 
                        {
                        SBCB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("PULS")) 
                        {
                        PULS(); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("PULU")) 
                        {
                        PULU(); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("SUBA")) 
                        {
                        SUBA(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("SUBB")) 
                        {
                        SUBB(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("PULU")) 
                        {
                        TSTA(); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("PULU")) 
                        {
                        TSTB(); 
                        break ;
                        }
                else if (texte[i][j].equalsIgnoreCase("INC")){
                        INC(texte[i][j+1]);
                         break ;
                       }
                          
                else if (texte[i][j].equalsIgnoreCase("LSLA")){
                        LSLA();
                         break ;
                       }
                else if (texte[i][j].equalsIgnoreCase("LSLB")){
                        LSLB();
                         break ;
                       }
                
                else if (texte[i][j].equalsIgnoreCase("LSRA")){
                        LSRA();
                         break ;
                       }
                 else if (texte[i][j].equalsIgnoreCase("LSRB")){
                        LSRB();
                         break ;
                       }
                else if (texte[i][j].equalsIgnoreCase("LSL"))
                        {
                        LSL(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LSR"))
                        {
                        LSR(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("NEGA")){
                        NEGA();
                         break ;
                       }
                else if (texte[i][j].equalsIgnoreCase("NEGB")){
                        NEGB();
                         break ;
                       }
                else if (texte[i][j].equalsIgnoreCase("NEG"))
                        {
                        NEG(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("ORA"))
                        {
                        ORA(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("ORB"))
                        {
                        ORB(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("ORCC"))
                        {
                        ORCC(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LEAS"))
                        {
                        LEAS(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LEAU"))
                        {
                        LEAU(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LEAY"))
                        {
                        LEAY(texte[i][j+1]); 
                        break;
                        }
                else if (texte[i][j].equalsIgnoreCase("LEAX"))
                        {
                        LEAX(texte[i][j+1]); 
                        break;
                        }
                else if(texte[i][j].equalsIgnoreCase("PSHS")) 
                        {
                        PSHS(texte[i][j+1]); 
                        break ;
                        }
                else if(texte[i][j].equalsIgnoreCase("PSHU")) 
                        {
                        PSHU(); 
                        break ;
                        }
                /*else if (!texte[texte.length-1][0].equalsIgnoreCase("end"))
                        {
                         JOptionPane.showMessageDialog(this, "maybe you forgot 'end' at the end",
                                 "erreur", JOptionPane.WARNING_MESSAGE);
                         break ;
                        }*/   
                else if (texte[i][j].equalsIgnoreCase("END"))
                {
                        ROM.tableau[cpt][1] = "3F";
                        cpt++;    
                        break ;
                }
                else 
                {
                        //new error();
                    String errorMessage = "Syntax error";
                    JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
                    //dispose(); 
                }
                 
                
            }
                
            }
            if(oui==1)
                {
                   int  i=I ;int  j=0 ;
                    String[][] textes = recupererTexte(jTextArea2);
                    while(i < Imax)
                    {
                        while (j < 2)
                        {
                            System.out.println(textes[i][j]);
                            j++;
                        }
                        i++;
                    }
                }
    }//GEN-LAST:event_jButton3ActionPerformed
       
    
    
    int indexExecution = 0;
    private void EXECUTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXECUTEActionPerformed
        // TODO add your handling code here:
         // Variable d'index pour suivre l'exécution ligne par ligne
    String[][] texte = recupererTexte(jTextArea2);
    Instructions k = new Instructions();

    if (indexExecution < texte.length) {
        String value = ROM.tableau[cpt][0];
        getpc().setText(value);

        String[] ligneCourante = texte[indexExecution];
        System.out.println("T[" + indexExecution + "] = " + Arrays.toString(ligneCourante));
        StringBuilder sb = new StringBuilder();

        for (String item : ligneCourante) {
            sb.append(item);
            sb.append(" ");
        }
        String concatenedString = sb.toString();
        gettext_instruct().setText(concatenedString);
        

        if (ligneCourante[0].equalsIgnoreCase("LDA")) {
            LDA(ligneCourante[1]);
        } 
        else if (ligneCourante[0].equalsIgnoreCase("LDB")) {
            LDB(ligneCourante[1]);
        } 
        else if (ligneCourante[0].equalsIgnoreCase("LDX")) {
            LDX(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("LDY")) {
            LDY(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("LDS")) {
            LDS(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("LDU")) {
            LDU(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("BEQ")) {
        indexExecution=executeBEQ(texte, indexExecution, 0);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ABX")) {
            ABX();
        } 
        else if (ligneCourante[0].equalsIgnoreCase("ADCA")) {
            ADCA(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ADCB")) {
            ADCB(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ADDA")) {
            ADDA(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("ADDB")) {
            ADDB(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ADDD")) {
            ADDD(ligneCourante[1]);
        } 
        else if (ligneCourante[0].equalsIgnoreCase("ANDA")) {
            ANDA(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ANDB")) {
            ANDB(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ANDCC")) {
            ANDCC();
        }
       else if (ligneCourante[0].equalsIgnoreCase("ASLA")) {
            ASLA();
        }
        else if (ligneCourante[0].equalsIgnoreCase("ASLB")) {
            ASLB();
        } 
        else if (ligneCourante[0].equalsIgnoreCase("ASL")) {
            ASL(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("ASRA")) {
            ASRA();
        }
        else if (ligneCourante[0].equalsIgnoreCase("ASRB")) {
            ASRB();
        }
       else if (ligneCourante[0].equalsIgnoreCase("ASR")) {
            ASR(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("BITB")) {
            BITB(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("BITA")) {
            BITA(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("STA")) {
            STA(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("STB")) {
            STB(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("STX")) {
            STX(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("STD")) {
            STD(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("STY")) {
            STY(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("STS")) {
            STS(ligneCourante[1]);
        }
       else if (ligneCourante[0].equalsIgnoreCase("STU")) {
            STU(ligneCourante[1]);
        }
        else if (ligneCourante[0].equalsIgnoreCase("NOP")) {
            NOP();
        }
        else if (ligneCourante[0].equalsIgnoreCase("END")) {
            ROM.tableau[cpt][1] = "3F";
                 cpt++; 
        }
        else if (ligneCourante[0].equalsIgnoreCase("CLRA")) {
            CLRA();
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CLRB")) {
            CLRB();
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CLR")) {
            CLR(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPA")) {
            CMPA(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPB")) {
            CMPB(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPS")) {
            CMPS(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPU")) {
            CMPU(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPX")) {
            CMPX(ligneCourante[1]);
        } 
        
        else if (ligneCourante[0].equalsIgnoreCase("CMPY")) {
            CMPY(ligneCourante[1]);
        } 
        else if (ligneCourante[0].equalsIgnoreCase("BMI")) {
        indexExecution=executeBMI(texte, indexExecution, 0);
        }
        
        else if (ligneCourante[0].equalsIgnoreCase("BRA")) {
        indexExecution=executeBRA(texte, indexExecution, 0);
        }
        
        else if (ligneCourante[0].equalsIgnoreCase("BPL")) {
        indexExecution=executeBRA(texte, indexExecution, 0);
        }
        
        else if (ligneCourante[0].equalsIgnoreCase("BNE")) {
        indexExecution=executeBRA(texte, indexExecution, 0);
        }
        
        else if (ligneCourante[0].equalsIgnoreCase("BVS")) {
        indexExecution=executeBRA(texte, indexExecution, 0);
        }
        else if(ligneCourante[0].equalsIgnoreCase("PULS")) 
                        {
                        PULS(); 
                        }
        else if(ligneCourante[0].equalsIgnoreCase("PULU")) 
                        {
                        PULU(); 
                        }
        else if(ligneCourante[0].equalsIgnoreCase("SUBA")) 
                        {
                        SUBA(ligneCourante[1]); 
                        }
        else if(ligneCourante[0].equalsIgnoreCase("SUBB")) 
                        {
                        SUBB(ligneCourante[1]); 
                        }
        else if(ligneCourante[0].equalsIgnoreCase("TSTA")) 
                        {
                        TSTA(); 
                        }
        else if(ligneCourante[0].equalsIgnoreCase("TSTB")) 
                        {
                        TSTB(); 
                        }
        else if (ligneCourante[0].equalsIgnoreCase("INC")){
                        INC(ligneCourante[1]);
                       }
        else if (ligneCourante[0].equalsIgnoreCase("LEAS"))
                               {
                               LEAS(ligneCourante[1]); 
                               }
        else if (ligneCourante[0].equalsIgnoreCase("LEAU"))
                               {
                               LEAU(ligneCourante[1]); 

                               }
        else if (ligneCourante[0].equalsIgnoreCase("LEAY"))
                               {
                               LEAY(ligneCourante[1]); 

                               }
         else if (ligneCourante[0].equalsIgnoreCase("LEAX"))
                               {
                               LEAX(ligneCourante[1]); 

                               }
         else if(ligneCourante[0].equalsIgnoreCase("PSHS")) 
                        {
                        PSHS(ligneCourante[1]); 
                       
                        }
         else if(ligneCourante[0].equalsIgnoreCase("PSHU")) 
                        {
                        PSHU(); 
                        
                        }
        else if (ligneCourante[0].equalsIgnoreCase("LSLA")){
                        LSLA();
                        
                       }
        else if (ligneCourante[0].equalsIgnoreCase("LSLB")){
                        LSLB();
                        
                       }
                
        else if (ligneCourante[0].equalsIgnoreCase("LSRA")){
                        LSRA();
                         
                       }
        else if (ligneCourante[0].equalsIgnoreCase("LSRB")){
                        LSRB();
                         
                       }
        else if (ligneCourante[0].equalsIgnoreCase("ORA"))
                        {
                        ORA(ligneCourante[1]); 
                        
                        }
        else if (ligneCourante[0].equalsIgnoreCase("ORB"))
                        {
                        ORB(ligneCourante[1]); 
                        
                        }
        else if (ligneCourante[0].equalsIgnoreCase("ORCC"))
                        {
                        ORCC(ligneCourante[1]); 
                        
                        }
        else if (ligneCourante[0].equalsIgnoreCase("NEGA")){
                        NEGA();
                         
                       }
        else if (ligneCourante[0].equalsIgnoreCase("NEGB")){
                        NEGB();
                         
                       }
        else if (ligneCourante[0].equalsIgnoreCase("NEG"))
                        {
                        NEG(ligneCourante[1]); 
                        
                        }
        else if(ligneCourante[0].equalsIgnoreCase("COMA")) 
                        {
                        COMA(); 
                       
                        }
                
        else if(ligneCourante[0].equalsIgnoreCase("COMB")) 
                        {
                        COMB(); 
                       
                        }
                
        else if(ligneCourante[0].equalsIgnoreCase("COM")) 
                        {
                        COM(ligneCourante[1]); 
                       
                        }
        
        else if(ligneCourante[0].equalsIgnoreCase("DECA")) 
                        {
                        DECA(); 
                        }
        
        
        else if(ligneCourante[0].equalsIgnoreCase("DECB")) 
                        {
                        DECB(); 
                        }
        
        else if(ligneCourante[0].equalsIgnoreCase("DEC")) 
                        {
                        DEC(ligneCourante[1]); 
                       
                        }
        
        else if(ligneCourante[0].equalsIgnoreCase("EORA")) 
                        {
                        EORA(ligneCourante[1]); 
                       
                        }
        
        else if(ligneCourante[0].equalsIgnoreCase("EORB")) 
                        {
                        EORB(ligneCourante[1]); 
                        }

         else if (ligneCourante[0].equalsIgnoreCase("EXG")) {
                        EXG(ligneCourante[1],ligneCourante[3]);
                        } 
        
        else if(ligneCourante[0].equalsIgnoreCase("INCA")) 
                        {
                        INCA(); 
                        }
        
        else if(ligneCourante[0].equalsIgnoreCase("INCB")) 
                        {
                        INCB(); 
                        }
        
        
        indexExecution++; // Incrémenter l'index pour passer à la ligne suivante lors du prochain appui sur le bouton
    }

    }//GEN-LAST:event_EXECUTEActionPerformed

    private void retryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryActionPerformed
        // TODO add your handling code here:
        ROM.tableau=ROM.reset();
        ROM.refresh();
        indexExecution = 0;
        cpt=0 ;
          gettexty().setText("0000");
          gettextdp().setText("00");
          getjTextField14().setText("00");
          gettextu().setText("0000");
          gettexts().setText("0000");
          gettext_instruct().setText("");
          gettextx().setText("0000");
          getjTextField4().setText("00");
          getpc().setText("FC00");
          getjTextField12().setText("00");
          getFlags().setText("00000100");
          
    }//GEN-LAST:event_retryActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        if(indexExecution!=0){
        String[][] texte = recupererTexte(jTextArea2);
        indexExecution--;
        indexExecution--;
        cpt-- ;
        String value = ROM.tableau[cpt][0];
        getpc().setText(value);
        String[] ligneCourante = texte[indexExecution+1];
        StringBuilder sb = new StringBuilder();

        for (String item : ligneCourante) {
            sb.append(item);
            sb.append(" ");
        }
        String concatenedString = sb.toString();
        gettext_instruct().setText(concatenedString);
        EXECUTE.doClick();
        }
    }//GEN-LAST:event_backActionPerformed
public void setColor(JButton p){
    p.setBackground(Color.red);
    
}
public void resetColor(JButton p1){
    p1.setBackground(new Color(204,51,255));
}

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
           setColor(jButton1);

    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
            resetColor(jButton1);

    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
        setColor(jButton2);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
        resetColor(jButton2);
    }//GEN-LAST:event_jButton2MouseExited

    private int executeBMI(String[][] texte, int i, int j) {
        int cst = i ;
    if (getFlags().getText().equalsIgnoreCase("00001000")) {
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
            
            
        }
        if(oui==1)
                return Imax;
    }
                return cst;
}
    
      
    private int executeBRA(String[][] texte, int i, int j) {
        int cst = i ;
    
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
            
            
        }
        if(oui==1)
                return Imax;
        else     
                return cst;
}
      
      
      
     private int executeBPL(String[][] texte, int i, int j) {
        int cst = i ;
    if (getFlags().getText().equalsIgnoreCase("00000000")) {
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
            
            
        }
        if(oui==1)
                return Imax;
    }
                return cst;
} 
      
     
     
    private int executeBNE(String[][] texte, int i, int j) {
        int cst = i ;
    if (!getFlags().getText().equalsIgnoreCase("00000100")) {
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
            
            
        }
        if(oui==1)
                return Imax;
    }
                return cst;
}  
     
    
    private int executeBVS(String[][] texte, int i, int j) {
        int cst = i ;
    if (getFlags().getText().equalsIgnoreCase("00000010")) {
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
            
        }
        if(oui==1)
                return Imax;
    }
                return cst;
}
    

    
    private int executeBEQ(String[][] texte, int i, int j) {
        int cst = i ;
    if (getFlags().getText().equalsIgnoreCase("00000100")) {
        String y = texte[i][j + 1];
        i++;
        I += i;
        J += j;
        while (!texte[i][0].equalsIgnoreCase(y)) {
            i++; 
        }
        if (texte[i][0].equalsIgnoreCase(y)) {
            System.out.println("trouver");
            oui = 1;
            Imax = i;
            Jmax = j;
        }
        if(oui==1)
                return Imax ;
    }
                return cst;
}
    
    public void refresh() 
    {
        revalidate(); // Effectue une refresh à la JFrame
        repaint(); // Force le rafraîchissement de la JFrame
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(moto6809.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(moto6809.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(moto6809.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(moto6809.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new moto6809().setVisible(true);
            }
        });
        
    
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EXECUTE;
    private javax.swing.JInternalFrame adaam;
    private javax.swing.JButton back;
    private javax.swing.JTextField flags;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField pc;
    private javax.swing.JButton retry;
    private javax.swing.JTextField text_instruct;
    private javax.swing.JTextField textdp;
    private javax.swing.JTextField texts;
    private javax.swing.JTextField textu;
    private javax.swing.JTextField textx;
    private javax.swing.JTextField texty;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
    if (e.getSource() == jButton1) {
        JColorChooser colorChooser = new JColorChooser();
        Color color = Color.GREEN ;
        jButton1.setBackground(color);
    }
    }
       
public static String[][] recupererTexte(JTextArea jTextArea) {
    String[] lines = jTextArea.getText().split("\n");
    String[][] texte = new String[lines.length][];

    for (int i = 0; i < lines.length; i++) {
        if (lines[i].contains("$")) {
            lines[i] = lines[i].replace("$", "");
        }
        texte[i] = lines[i].split(" ");
    }

    return texte;
}
   /*for (int i = 0; i < lines.length; i++) {
        if (lines[i].contains("$") || lines[i].contains("#")) {
            lines[i] = lines[i].replace("$", "");
            lines[i] = lines[i].replace("#", "");
        }
        texte[i] = lines[i].split(" ");
    }*/

    
    public static String[] supprimerCaractere(String[] tableau, char caractere) 
    {
    for (int i = 0; i < tableau.length; i++) 
    {
        tableau[i] = tableau[i].replaceAll(Character.toString(caractere), "");
    }
    return tableau;
     }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                     /*test*/
     tableau t = new tableau();
    String [][]tab = t.tableau ; 
    
    public void ABX() {
        // Ajouter l'accumulateur B à X
        
        String X = gettextx().getText();
        String Y = getjTextField14().getText();
        int x = Integer.parseInt(X,16);
        int y = Integer.parseInt(Y,16);
        int somme = x+y ;
        String k = Integer.toHexString(somme).toUpperCase();
        gettextx().setText(k);
        /*Graphics j = null ;
        this.update(j);
        this.revalidate();
        this.repaint();*/
    }

    public void ADCA(String Y) {
        // Addition du contenu mémoire à l'accumulateur A avec la retenue
        String X = getjTextField12().getText();
    int y = Integer.parseInt(Y,16);
    int x = Integer.parseInt(X,16);
    int somme = x + y;
    int zz = 0 , ww=0 ;
    if (somme > 15) 
    {
        zz=1 ; // Dépassement de 4 bits
    }
    if (somme > 255) {
        ww=1;  // Dépassement de 8 bits
    } 
    if(zz==1)
    {
        getFlags().setText("00100000"); 
    }
    else if (ww==1)
    {
        getFlags().setText("00000001"); 
    }
    else if (zz==1 && ww==1)
    {
        getFlags().setText("00100001"); 
    }
    else
    {
        getFlags().setText("00000000"); 
    }
    String k = Integer.toHexString(somme).toUpperCase();
    getjTextField12().setText(k);
    }

    public void ADCB(String Y) {
        // Addition du contenu mémoire à l'accumulateur B avec la retenue
          String X = getjTextField14().getText();
    int y = Integer.parseInt(Y,16);
    int x = Integer.parseInt(X,16);
    int somme = x + y;
    int zz = 0 , ww=0 ;
    if (somme > 15) 
    {
        zz=1 ; // Dépassement de 4 bits
    }
    if (somme > 255) {
        ww=1;  // Dépassement de 8 bits
    } 
    if(zz==1)
    {
        getFlags().setText("00100000"); 
    }
    else if (ww==1)
    {
        getFlags().setText("00000001"); 
    }
    else if (zz==1 && ww==1)
    {
        getFlags().setText("00100001"); 
    }
    else
    {
        getFlags().setText("00000000"); 
    }
    String k = Integer.toHexString(somme).toUpperCase();
    getjTextField14().setText(k);
    }

    public void ADDA(String Y) {
        // Addition du contenu mémoire à l'accumulateur A
        repaint();
        revalidate();
        Y=Y.replace("#", "");
        String X = getjTextField12().getText();
        System.out.println(X);
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int somme = x+y ;
        int zz = 0 , ww=0 ;
        if (somme > 15) 
        {
            zz=1 ; // Dépassement de 4 bits
        }
        if (somme > 255) {
            ww=1;  // Dépassement de 8 bits
        } 
        if(zz==1)
        {
            getFlags().setText("00100000"); 
        }
        else if (ww==1)
        {
            getFlags().setText("00000001"); 
        }
        else if (zz==1 && ww==1)
        {
            getFlags().setText("00100001"); 
        }
        else
        {
            getFlags().setText("00000000"); 
        }
        String k = Integer.toHexString(somme).toUpperCase();
        getjTextField12().setText(k);
    }

    public void ADDB(String Y) {
        // Addition du contenu mémoire à l'accumulateur B
         String X = getjTextField14().getText();
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int somme = x+y ;
        int zz = 0 , ww=0 ;
        if (somme > 15) 
        {
            zz=1 ; // Dépassement de 4 bits
        }
        if (somme > 255) {
            ww=1;  // Dépassement de 8 bits
        } 
        if(zz==1)
        {
            getFlags().setText("00100000"); 
        }
        else if (ww==1)
        {
            getFlags().setText("00000001"); 
        }
        else if (zz==1 && ww==1)
        {
            getFlags().setText("00100001"); 
        }
        else
        {
            getFlags().setText("00000000"); 
        }
        String k = Integer.toHexString(somme).toUpperCase();
        getjTextField14().setText(k);
    }

    public void ADDD(String Y) {
        // Addition du contenu mémoire au registre D
         String X = getjTextField12().getText();
         String Z = getjTextField14().getText();
         String concat = X.concat(Z);
         System.out.println(concat);
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(concat,16);
        int somme = x+y ;
        String k = Integer.toHexString(somme).toUpperCase();
        k = String.format("%04X", Integer.parseInt(k, 16));
        String A = k.substring(0, 2); 
        String B = k.substring(2, 4); 
        getjTextField12().setText(A);
        getjTextField14().setText(B);
    }

    public void ANDA(String Y) {
        // ET logique entre A et le contenu mémoire
        String X = getjTextField12().getText();
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int et_logique = x & y ;
        if(et_logique==0)
        {
            getFlags().setText("00000100");
        }
        else
        {
            getFlags().setText("00000000");
        }
        String k = Integer.toString(et_logique);
        getjTextField12().setText(k);
        
    }

    public void ANDB(String Y) {
        // ET logique entre B et le contenu  mémoire
        String X = getjTextField14().getText();
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int et_logique = x & y ;
        if(et_logique==0)
        {
            getFlags().setText("00000100");
        }
        else
        {
            getFlags().setText("00000000");
        }
        String k = Integer.toString(et_logique);
        getjTextField14().setText(k);
    }

    public void ANDCC() {
        // ET logique entre CC et le contenu mémoire
    }

    public void ASLA() {
        // Décalage arithmétique à gauche de A
        String X = getjTextField12().getText();
        int x = Integer.parseInt(X, 16);
        String binaryString = Integer.toBinaryString(x);
        String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

        // Tester le bit de poids fort
        char mmm = formattedBinary.charAt(0);
        char nnn= '1';
        boolean hasLeadingOne = (mmm==nnn);
        x <<= 1;  // decaler a gauche d'1 position
        x &= 0xFF;  // et logique bin x et 0ff / dik x kat3ni masquer dik lvaleur li ghatzad b decalage 
        X = Integer.toString(x, 16).toUpperCase();  // Convertit le résultat en hexadécimal
        String formated = String.format("%2s", X).replace(' ', '0');
        getjTextField12().setText(formated);
        // Vérifier le bit de poids fort
        

        if (hasLeadingOne) {
            // Le nombre a un "1" au poids fort
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids fort
            getFlags().setText("00000000");
        }
    }

    public void ASLB() {
        // Décalage arithmétique à gauche de B
        String X = getjTextField14().getText();
        int x = Integer.parseInt(X, 16);
        String binaryString = Integer.toBinaryString(x);
        String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

        // Tester le bit de poids fort
        char mmm = formattedBinary.charAt(0);
        char nnn= '1';
        boolean hasLeadingOne = (mmm==nnn);
        x <<= 1;  // decaler a gauche d'1 position
        x &= 0xFF;  // et logique bin x et 0ff / dik x kat3ni masquer dik lvaleur li ghatzad b decalage 
        X = Integer.toString(x, 16).toUpperCase();  // Convertit le résultat en hexadécimal
        String formated = String.format("%2s", X).replace(' ', '0');
        getjTextField14().setText(formated);
        if (hasLeadingOne) {
            // Le nombre a un "1" au poids fort
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids fort
            getFlags().setText("00000000");
        }
}

    public void ASL(String x) {
        // Décalage arithmétique à gauche du contenu mémoire
        int i,k ,  X;
        boolean hasLeadingOne=false;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                            k= i ;
                            X =  Integer.parseInt(tab[k][1],16);
                            String binaryString = Integer.toBinaryString(X);
                            String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

                            // Tester le bit de poids fort
                            char mmm = formattedBinary.charAt(0);
                            char nnn= '1';
                            hasLeadingOne = (mmm==nnn);
                            X <<= 1;  
                            X &= 0xFF;   
                            String decaler = Integer.toString(X, 16).toUpperCase(); 
                            tab[k][1]= decaler ;
                    }
            if (hasLeadingOne) {
            // Le nombre a un "1" au poids fort
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids fort
            getFlags().setText("00000000");
        }
        }
    }

    public void ASRA() {
        // Décalage arithmétique à droite de A
        String X = getjTextField12().getText();
        int x = Integer.parseInt(X, 16);
        String binaryString = Integer.toBinaryString(x);
        String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

        // Tester le bit de poids fort
        char mmm = formattedBinary.charAt(formattedBinary.length() - 1);
        char nnn= '1';
        boolean hasLeadingOne = (mmm==nnn);
        x >>= 1;  
        x &= 0xFF;  // chof asrb
        X = Integer.toString(x, 16).toUpperCase(); 
        String formated = String.format("%2s", X).replace(' ', '0');
        getjTextField12().setText(formated);
          if (hasLeadingOne) {
            // Le nombre a un "1" au poids faible
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids faible
            getFlags().setText("00000000");
        }
    }

    public void ASRB() {
        // Décalage arithmétique à droite de B
        String X = getjTextField14().getText();
        int x = Integer.parseInt(X, 16);
        String binaryString = Integer.toBinaryString(x);
        String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

        // Tester le bit de poids fort
        char mmm = formattedBinary.charAt(formattedBinary.length() - 1);
        char nnn= '1';
        boolean hasLeadingOne = (mmm==nnn);
        x >>= 1;  // move to right
        x &= 0xFF;  // et logique bach yb9aw les 8bits dyal poids faible
        X = Integer.toString(x, 16).toUpperCase();  // conversion en Hexa
        String formated = String.format("%2s", X).replace(' ', '0');
        getjTextField14().setText(formated);
          if (hasLeadingOne) {
            // Le nombre a un "1" au poids faible
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids faible
            getFlags().setText("00000000");
        }
    }

    public void ASR(String x) {
        // Décalage arithmétique à droite du contenu mémoire
        int i,k ,  X;
        boolean hasLeadingOne = false ;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                            k= i ;
                            X =  Integer.parseInt(tab[k][1],16);
                            String binaryString = Integer.toBinaryString(X);
                            String formattedBinary = String.format("%8s", binaryString).replace(' ', '0');

                            // Tester le bit de poids fort
                            char mmm = formattedBinary.charAt(formattedBinary.length() - 1);
                            char nnn= '1';
                            hasLeadingOne = (mmm==nnn);
                            X >>= 1;  
                            X &= 0xFF;   
                            String decaler = Integer.toString(X, 16).toUpperCase(); 
                            tab[k][1]= decaler ;
                    }
              if (hasLeadingOne) {
            // Le nombre a un "1" au poids faible
            getFlags().setText("00000001");
        } else {
            // Le nombre n'a pas de "1" au poids faible
            getFlags().setText("00000000");
        }
        }
    }


    public void BITA(String X) {
        // Test de bit mémoire avec A
        String A = getjTextField14().getText();
        int a = Integer.parseInt(A, 16);
        int x = Integer.parseInt(X, 16);
        int et_logique = a & x;
        int s = 0;
        String Z ;
        String N;

        if (et_logique == 0) {
            Z = "00000100";
            s += Integer.parseInt(Z, 2);
        }

        if ((a & 0x80) != 0) {
            N = "00001000";
            s += Integer.parseInt(N, 2);
        } else {
            N = "00000000";
            s += Integer.parseInt(N, 2);
        }

        String k = String.format("%8s", Integer.toBinaryString(s)).replace(' ', '0');
        getFlags().setText(k); //replace car il y a des espace quand on convertit
        
    }

    public void BITB(String X) {
        // Test de bit mémoire avec B
         String A = getjTextField12().getText();
        int a = Integer.parseInt(A, 16);
        int x = Integer.parseInt(X, 16);
        int et_logique = a & x;
        int s = 0;
        String Z ;
        String N;

        if (et_logique == 0) {
            Z = "00000100";
            s += Integer.parseInt(Z, 2);
        }

        if ((a & 0x80) != 0) {
            N = "00001000";
            s += Integer.parseInt(N, 2);
        } else {
            N = "00000000";
            s += Integer.parseInt(N, 2);
        }

        String k = String.format("%8s", Integer.toBinaryString(s)).replace(' ', '0');
        getFlags().setText(k); //replace car il y a des espace quand on convertit
    }


    public  void CLRA() {
       // Mise à zéro de A
    String x="00";
    getjTextField12().setText(x);
     getFlags().setText("00000100");  
     ROM.tableau[cpt][1] = "4F";
                     cpt++;
     
    }

    public  void CLRB() {
        // Mise à zéro de B
    String x="00";
    getjTextField14().setText(x);
    getFlags().setText("00000100"); 
    ROM.tableau[cpt][1] = "5F";
                     cpt++;
    }

    public  void CLR(String S) {
        // Mise à zéro d'une case mémoire
    int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        tab[k][1]="0000";
                    }
        }    
    }

    public void CMPA(String S) {
   // Comparer A avec le contenu mémoire
        
    String X = getjTextField12().getText();

// Convertir la valeur hexadécimale en un nombre entier signé sur 1 octet
int y = (byte) Short.parseShort(X, 16);

System.out.println(y);

   int i, k = 0;

   for (i = 0; i < tab.length; i++) {
       
       if (tab[i][0].equalsIgnoreCase(S)) {
        k = i;
        String x = tab[k][1];

        // Convertir la valeur hexadécimale en un nombre entier signé sur 1 octet
        int Y = (byte) Short.parseShort(x, 16);

        System.out.println(Y);

        if (y == Y) {
            getFlags().setText("00000100");
        } 
        
        else if (y < Y) {
            getFlags().setText("00001000");
        } 
        
        else if (y > Y) {
            getFlags().setText("00000000");
        }
    }
}                   String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "B1";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
    }

    public  void CMPB(String S) {
        // Comparer B avec le contenu mémoire
    
     String X = getjTextField14().getText();
        // Convertir la valeur hexadécimale en un nombre entier signé sur 1 octet
    int y = (byte) Short.parseShort(X, 16);


    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
       
       if (tab[i][0].equalsIgnoreCase(S)) {
        k = i;
        String x = tab[k][1];

        // Convertir la valeur hexadécimale en un nombre entier signé sur 1 octet
        int Y = (byte) Short.parseShort(x, 16);

        System.out.println(Y);

        if (y == Y) {
            getFlags().setText("00000100");
        } 
        
        else if (y < Y) {
            getFlags().setText("00001000");
        } 
        
        else if (y > Y) {
            getFlags().setText("00000000");
        }
    }
}                   String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "F1";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;

    }
     
    
    public  void CMPD(String S) {
 // Récupérer la valeur hexadécimale de Y
    String X =getjTextField12().getText() + getjTextField14().getText();

    // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
    short y = Short.parseShort(X, 16);

    System.out.println(y);

    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
        if (tab[i][0].equalsIgnoreCase(S)) {
            k = i;

            // Récupérer les valeurs hexadécimales dans l'adresse S et S+1
            String x1 = tab[k][1];
            String x2 = tab[k + 1][1];

            // Concaténer les deux valeurs pour former un nombre sur 2 octets
            String concatenatedValue = x1 + x2;

            // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
            short Y = Short.parseShort(concatenatedValue, 16);

            System.out.println(Y);

            if (y == Y) {
                getFlags().setText("00000100");
            } else if (y < Y) {
                getFlags().setText("00001000");
            } else if (y > Y) {
                getFlags().setText("00000000");
            }
        }
    }
                    String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "10";
                     cpt++;
                     ROM.tableau[cpt][1] = "B3";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
}
    

    public  void CMPS(String S) {
 // Récupérer la valeur hexadécimale de Y
    String X = gettexts().getText();

    // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
    short y = Short.parseShort(X, 16);

    System.out.println(y);

    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
        if (tab[i][0].equalsIgnoreCase(S)) {
            k = i;

            // Récupérer les valeurs hexadécimales dans l'adresse S et S+1
            String x1 = tab[k][1];
            String x2 = tab[k + 1][1];

            // Concaténer les deux valeurs pour former un nombre sur 2 octets
            String concatenatedValue = x1 + x2;

            // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
            short Y = Short.parseShort(concatenatedValue, 16);

            System.out.println(Y);

            if (y == Y) {
                getFlags().setText("00000100");
            } else if (y < Y) {
                getFlags().setText("00001000");
            } else if (y > Y) {
                getFlags().setText("00000000");
            }
            }
        }
                    String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "11";
                     cpt++;
                     ROM.tableau[cpt][1] = "BC";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
    }
    
    
    
    public  void CMPU(String S) {
 // Récupérer la valeur hexadécimale de Y
    String X = gettextu().getText();

    // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
    short y = Short.parseShort(X, 16);

    System.out.println(y);

    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
        if (tab[i][0].equalsIgnoreCase(S)) {
            k = i;

            // Récupérer les valeurs hexadécimales dans l'adresse S et S+1
            String x1 = tab[k][1];
            String x2 = tab[k + 1][1];

            // Concaténer les deux valeurs pour former un nombre sur 2 octets
            String concatenatedValue = x1 + x2;

            // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
            short Y = Short.parseShort(concatenatedValue, 16);

            System.out.println(Y);

            if (y == Y) {
                getFlags().setText("00000100");
            } else if (y < Y) {
                getFlags().setText("00001000");
            } else if (y > Y) {
                getFlags().setText("00000000");
            }
            }
        }
                     String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "11";
                     cpt++;
                     ROM.tableau[cpt][1] = "B3";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
    }

    public  void CMPX(String S) {
 // Récupérer la valeur hexadécimale de Y
    String X = gettextx().getText();

    // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
    short y = Short.parseShort(X, 16);

    System.out.println(y);

    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
        if (tab[i][0].equalsIgnoreCase(S)) {
            k = i;

            // Récupérer les valeurs hexadécimales dans l'adresse S et S+1
            String x1 = tab[k][1];
            String x2 = tab[k + 1][1];

            // Concaténer les deux valeurs pour former un nombre sur 2 octets
            String concatenatedValue = x1 + x2;

            // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
            short Y = Short.parseShort(concatenatedValue, 16);

            System.out.println(Y);

            if (y == Y) {
                getFlags().setText("00000100");
            } else if (y < Y) {
                getFlags().setText("00001000");
            } else if (y > Y) {
                getFlags().setText("00000000");
            }
            }
        }
                    String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "BC";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
    }
        
    public void CMPY(String S) {
    // Récupérer la valeur hexadécimale de Y
    String X = gettexty().getText();

    // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
    short y = Short.parseShort(X, 16);

    System.out.println(y);

    int i, k = 0;

    for (i = 0; i < tab.length; i++) {
        if (tab[i][0].equalsIgnoreCase(S)) {
            k = i;

            // Récupérer les valeurs hexadécimales dans l'adresse S et S+1
            String x1 = tab[k][1];
            String x2 = tab[k + 1][1];

            // Concaténer les deux valeurs pour former un nombre sur 2 octets
            String concatenatedValue = x1 + x2;

            // Convertir la valeur hexadécimale en un nombre entier signé sur 2 octets
            short Y = Short.parseShort(concatenatedValue, 16);

            System.out.println(Y);

            if (y == Y) {
                getFlags().setText("00000100");
            } else if (y < Y) {
                getFlags().setText("00001000");
            } else if (y > Y) {
                getFlags().setText("00000000");
            }
        }
    }           
                    String a =S.substring(0, 2);
                    String b =S.substring(2, 4);
                    ROM.tableau[cpt][1] = "10";
                     cpt++;
                     ROM.tableau[cpt][1] = "BC";
                     cpt++;
                     ROM.tableau[cpt][1] = a;
                     cpt++;
                     ROM.tableau[cpt][1] = b;
                     cpt++;
}
    


     public  void COMA() {
        // Complément à un de A
            String hex = getjTextField12().getText();

        //System.out.println("Hexadécimal d'origine : " + hex);

        // Convertir l'hexadécimal en binaire sur 4 bits
        StringBuilder binary = new StringBuilder();
        for (char c : hex.toCharArray()) {
            int decimal = Integer.parseInt(String.valueOf(c), 16);
            String binaryPart = String.format("%4s", Integer.toBinaryString(decimal)).replace(' ', '0');
            binary.append(binaryPart);
        }
        String binaryString = binary.toString();
        //System.out.println("Binaire : " + binaryString);

        // Inverser les bits
        StringBuilder invertedBinary = new StringBuilder();
        for (char bit : binaryString.toCharArray()) {
            if (bit == '0') {
                invertedBinary.append('1');
            } else {
                invertedBinary.append('0');
            }
        }
        String invertedBinaryString = invertedBinary.toString();
        //System.out.println("Binaire inversé : " + invertedBinaryString);

        // Convertir le binaire inversé en hexadécimal
        int invertedDecimal = Integer.parseInt(invertedBinaryString, 2);
        String invertedHex = String.format("%02X", invertedDecimal);
        //System.out.println("Hexadécimal du binaire inversé : " + invertedHex); super.getjTextField12().setText(invertedHex);

        getjTextField12().setText(invertedHex);
        boolean isPositive = (invertedHex.compareTo("00") >= 0 && invertedHex.compareTo("7F") <= 0);

                if (isPositive) {
                    // Le nombre est positif
                    getFlags().setText("00000000");
                } else {
                    // Le nombre est négatif
                    getFlags().setText("00001000");
                }    
            }



            public  void COMB() {
              String hex = getjTextField14().getText();

        //System.out.println("Hexadécimal d'origine : " + hex);

        // Convertir l'hexadécimal en binaire sur 4 bits
        StringBuilder binary = new StringBuilder();
        for (char c : hex.toCharArray()) {
            int decimal = Integer.parseInt(String.valueOf(c), 16);
            String binaryPart = String.format("%4s", Integer.toBinaryString(decimal)).replace(' ', '0');
            binary.append(binaryPart);
        }
        String binaryString = binary.toString();
        //System.out.println("Binaire : " + binaryString);

        // Inverser les bits
        StringBuilder invertedBinary = new StringBuilder();
        for (char bit : binaryString.toCharArray()) {
            if (bit == '0') {
                invertedBinary.append('1');
            } else {
                invertedBinary.append('0');
            }
        }
        String invertedBinaryString = invertedBinary.toString();
        //System.out.println("Binaire inversé : " + invertedBinaryString);

        // Convertir le binaire inversé en hexadécimal
        int invertedDecimal = Integer.parseInt(invertedBinaryString, 2);
        String invertedHex = String.format("%02X", invertedDecimal);
        //System.out.println("Hexadécimal du binaire inversé : " + invertedHex); super.getjTextField12().setText(invertedHex);

        getjTextField14().setText(invertedHex);
        boolean isPositive = (invertedHex.compareTo("00") >= 0 && invertedHex.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
    }

    public  void COM(String S) {
       int k;
     
        for ( int i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                          k= i ;
                          String hex = tab[k][1];
                        //continue outer;
                       // Convertir l'hexadécimal en binaire sur 4 bits
              StringBuilder binary = new StringBuilder();
              for (char c : hex.toCharArray()) {
              int decimal = Integer.parseInt(String.valueOf(c), 16);
              String binaryPart = String.format("%4s", Integer.toBinaryString(decimal)).replace(' ', '0');
              binary.append(binaryPart);
             }
             String binaryString = binary.toString();
            //System.out.println("Binaire : " + binaryString);

            // Inverser les bits
           StringBuilder invertedBinary = new StringBuilder();
         for (char bit : binaryString.toCharArray()) {
             if (bit == '0') {
                invertedBinary.append('1');
              } else {
                invertedBinary.append('0');
           }
         }
          String invertedBinaryString = invertedBinary.toString();
          //System.out.println("Binaire inversé : " + invertedBinaryString);

         // Convertir le binaire inversé en hexadécimal
        int invertedDecimal = Integer.parseInt(invertedBinaryString, 2);
       String invertedHex = String.format("%02X", invertedDecimal);
      //System.out.println("Hexadécimal du binaire inversé : " + invertedHex); super.getjTextField12().setText(invertedHex);

       tab[k][1]=invertedHex;
                        
                    }
        }
    }
   

    public void DECA() {
        // Décrémentation de A
   
    String X = getjTextField12().getText();
    int y = Integer.parseInt(X,16);
    y--;
    X=Integer.toHexString(y);
    getjTextField12().setText(X.toUpperCase());
      boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
                   
                     ROM.tableau[cpt][1] = "4A";
                     cpt++;
    }

    public  void DECB() {
        // Décrémentation de B
    String X = getjTextField14().getText();
    int y = Integer.parseInt(X,16);
    y--;
    X=Integer.toHexString(y);
    getjTextField14().setText(X.toUpperCase());
      boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }   
                    ROM.tableau[cpt][1] = "5A";
                     cpt++;
        }

   
    public  void DEC(String S) {
        // Décrémentation du contenu mémoire
    int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        String X=tab[k][1];
                        int Y = Integer.parseInt(X,16);
                        Y--;
                        X = Integer.toHexString(Y);
                        tab[k][1]=X;
                        
                        
                    }
        }    
    
    }

    
    
    public void EORA(String S) {
      
      String M =getjTextField12().getText();
      int Y = Integer.parseInt(M, 16);
      
      int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
        
      int Z=Integer.parseInt(X, 16);
      int res = Z ^ Y;
      String f =Integer.toHexString(res).toUpperCase();
      getjTextField12().setText(f);
      boolean isPositive = (f.compareTo("00") >= 0 && f.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
      
        
    }

    public  void EORB(String S) {
      
      String M =getjTextField14().getText();
      int Y = Integer.parseInt(M, 16);
      
      int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
        
      int Z=Integer.parseInt(X, 16);
      int res = Z ^ Y;
      String f =Integer.toHexString(res).toUpperCase();
      getjTextField14().setText(f);
      boolean isPositive = (f.compareTo("00") >= 0 && f.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
              
    }

    
    public  void EXG(String M , String N) {
        // Échange de registres
       
        
        if(M.equals(N))
        {}
       
        else{
        if((M.equals("A") || M.equals("B")) && (N.equals("B") || N.equals("A") ))
   {   
       String S =getjTextField12().getText();
       getjTextField12().setText(getjTextField14().getText());
       
       getjTextField14().setText(S);
    
       }
        else if((M.equals("A") || M.equals("DP")) && (N.equals("DP") || N.equals("A") ))
        {  
            String S =getjTextField12().getText();
            getjTextField12().setText(gettextdp().getText());

            gettextdp().setText(S);

            }

     else if((M.equals("DP") || M.equals("B")) && (N.equals("B") || N.equals("DP") ))
     {  
       String S =getjTextField14().getText();
       getjTextField14().setText(gettextdp().getText());
       
        gettextdp().setText(S);
    
       }
       
       
   else if((M.equals("S") || M.equals("U")) && (N.equals("S") || N.equals("U") ))
        {  
       String S =gettextu().getText();
       gettextu().setText(gettexts().getText());
       
       gettexts().setText(S);
    
       }
   
   else if((M.equals("X") || M.equals("Y")) && (N.equals("X") || N.equals("Y") ))
    {  
       String S =gettextx().getText();
       gettextx().setText(gettexty().getText());
       
       gettexty().setText(S);
    
       }
   
   
      else if((M.equals("X") || M.equals("S")) && (N.equals("X") || N.equals("S") ))
        {  
       String S =gettextx().getText();
       gettextx().setText(gettexts().getText());
       
       gettexts().setText(S);
    
       } 
   
     else if((M.equals("X") || M.equals("U")) && (N.equals("X") || N.equals("U") ))
         {  
       String S =gettextx().getText();
       gettextx().setText(gettextu().getText());
       
       gettextu().setText(S);
    
       } 
   
   
      else if((M.equals("Y") || M.equals("S")) && (N.equals("B") || N.equals("DP") ))
         {  
       String S =gettexty().getText();
       gettexty().setText(gettexts().getText());
       
       gettexts().setText(S);
    
       } 
   
     
       else if((M.equals("Y") || M.equals("U")) && (N.equals("Y") || N.equals("U") ))
        {  
       String S =gettexty().getText();
       gettexty().setText(gettextu().getText());
       
       gettextu().setText(S);
    
       } 
       
        
        
       else 
                {
                        //new error();
                    String errorMessage = "Syntax error";
                    JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
                    //dispose(); 
                } 
        
        }
        ROM.tableau[cpt][1] = "1E";
                     cpt++; 
                     ROM.tableau[cpt][1] = "89";
                     cpt++; 
        
    }

    public  void INCA() {
        // Incrémentation de A
    String X = getjTextField12().getText();
    int y = Integer.parseInt(X,16);
    y++;
    X=Integer.toHexString(y);
    getjTextField12().setText(X.toUpperCase());
      boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        
        ROM.tableau[cpt][1] = "4C";
                     cpt++; 
        
       }

    
    public  void INCB() {
        // Incrémentation de B
    String X = getjTextField14().getText();
    int y = Integer.parseInt(X,16);
    y++;
    X=Integer.toHexString(y);
    getjTextField14().setText(X.toUpperCase());
      boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
    
   ROM.tableau[cpt][1] = "5C";
                     cpt++; 
    }

    public  void INC(String S) {
        // Incrémentation du contenu mémoire
    int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        String M=tab[k][1];
                        int Y = Integer.parseInt(M,16);
                        Y++;
                        tab[k][1]=Integer.toHexString(Y);
                    }
        }        
    }

    public static void JMP() {
        // Saut inconditionnel
    }

    public static void JSR() {
        // Saut au sous-programme
    }

    public void LDA(String S) {
        // Chargement de A avec le contenu mémoire
        
        if (!S.contains("#")&& !S.contains("<")&& !S.contains(","))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
        ROM.tableau[cpt][1] = "B6";
                 cpt++;
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;         
       getjTextField12().setText(X);
       boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        //this.getjTextField12().getParent().repaint();
        //this.setVisible(true);
       // super.refresh();
        }
        else if (S.contains(","))
        {   
            
             ROM.tableau[cpt][1] = "A6";
                 cpt++;
            
            String[] parts = S.split(","); 
            String numberStr = parts[0].isEmpty() ? "0" : parts[0]; // Récupérer la première partie de la chaîne séparée
            // il a kanet khawya khas n7et fiha 0 ;;;;;;
            //int post_octect2 = Integer.parseInt(numberStr);
            S = S.replace(",", "").toUpperCase();
            String varriable="" ;
            if (S.contains("X"))
                    {
                        varriable = gettextx().getText();
                    }
            else if(S.contains("Y"))
                    {
                         varriable = gettexty().getText();
                    }
            else if(S.contains("U"))
                    {
                         varriable = gettextu().getText();
                    }
            else if(S.contains("S"))
                    {
                         varriable = gettexts().getText();
                    }
            
     
           
                 String Radicale ="";
             if (S.contains("X"))
                    {
                       Radicale = "00";
                    }
             if(S.contains("Y"))
                    {
                         Radicale = "01";
                    }
             if(S.contains("U"))
                    {
                         Radicale = "10";
                    }
             if(S.contains("S"))
                    {
                         Radicale = "11";
                    }

        String finish ="";
        String value ="";
        if(numberStr.equalsIgnoreCase("A"))
        {
            value = getjTextField12().getText();
            String post = "1"+Radicale+"00110";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else if(numberStr.equalsIgnoreCase("B"))
        {
            value = getjTextField14().getText();
            String post = "1"+Radicale+"00101";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else if(numberStr.equalsIgnoreCase("D"))
        {
            String value1 = getjTextField12().getText();
            String value2 = getjTextField14().getText();
            value = value1.concat(value2);
            value = String.format("%04d", Integer.parseInt(value));
            String post = "1"+Radicale+"01011";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02s", hexString);
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else {
            value =numberStr;
        int z =Integer.parseInt(value,16);
            if (z==0)
            {
                String post = "1"+Radicale+"0100";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            
            }
            else if ((z & 0xFFFFFFF0) == 0) {
                String ss2=Integer.toBinaryString(z);
                String post = "1"+Radicale+ss2;
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }

            // Vérification 7 bits
            else if ((z & 0xFFFFFF80) == 0) {
                String post = "1"+Radicale+"01000";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }

            // Vérification 15 bits
            else if ((z & 0xFFFF8000) == 0) {
                String post = "1"+Radicale+"01001";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }        
            else 
            {
                System.out.println("existe pas ce deplacement ");
            }
        }
            
            
            int number = Integer.parseInt(varriable,16);
            System.out.println(varriable);
            int number_X = Integer.parseInt(value,16);
            System.out.println(value);
            int somme = number + number_X;
            String adresse = String.format("%04X", somme);
            int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(adresse))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
            
            
        ROM.tableau[cpt][1] = X;
                 cpt++;
                 
       getjTextField12().setText(X);
       boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        //this.getjTextField12().getParent().repaint();
        //this.setVisible(true);
       // super.refresh();
        }
        else if(S.contains("<"))
                {
                    S = S.replace("<", "");
                    String formated = String.format("%2s", S).replace(' ', '0');
                    String dp = gettextdp().getText();
                    dp=dp.concat(formated);
                    System.out.println(dp);
                    dp= String.format("%4s", dp).replace(' ', '0');
                    System.out.println(dp);
                     int i ,k=0;
                String X ="0000";
               for ( i=0 ; i < tab.length ; i++ )
               {
                   if (tab[i][0].equalsIgnoreCase(dp))
                           {
                                k= i ;
                               X = tab[k][1];
                               //continue outer;
                           }

               }
               ROM.tableau[cpt][1] = "96";
                        cpt++;
               ROM.tableau[cpt][1] = X;
                        cpt++;      
              getjTextField12().setText(X);
              boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

               if (isPositive) {
                   // Le nombre est positif
                   getFlags().setText("00000000");
               } else {
                   // Le nombre est négatif
                   getFlags().setText("00001000");
               }
                }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%2s", S).replace(' ', '0');
            getjTextField12().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "86";
                cpt++;
            ROM.tableau[cpt][1] = formated;
                 cpt++;    
        boolean isPositive = (formated.compareTo("00") >= 0 && formated.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        }
       if(getjTextField12().getText().equalsIgnoreCase("00"))
       {
           getFlags().setText("00000100");
       }
    }

    public void LDB(String S) {
        // Chargement de B avec le contenu mémoire
        if (!S.contains("#")&& !S.contains("<") && !S.contains(","))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
        ROM.tableau[cpt][1] = "F6";
                 cpt++;
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;         
       getjTextField14().setText(X);
       boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        //this.getjTextField12().getParent().repaint();
        //this.setVisible(true);
       // super.refresh();
        }
         else if (S.contains(","))
        {   
            
             ROM.tableau[cpt][1] = "E6";
                 cpt++;
            
            String[] parts = S.split(","); 
            String numberStr = parts[0].isEmpty() ? "0" : parts[0]; // Récupérer la première partie de la chaîne séparée
            // il a kanet khawya khas n7et fiha 0 ;;;;;;
            //int post_octect2 = Integer.parseInt(numberStr);
            S = S.replace(",", "").toUpperCase();
            String varriable="" ;
            if (S.contains("X"))
                    {
                        varriable = gettextx().getText();
                    }
            else if(S.contains("Y"))
                    {
                         varriable = gettexty().getText();
                    }
            else if(S.contains("U"))
                    {
                         varriable = gettextu().getText();
                    }
            else if(S.contains("S"))
                    {
                         varriable = gettexts().getText();
                    }
            
     
           
                 String Radicale ="";
             if (S.contains("X"))
                    {
                       Radicale = "00";
                    }
             if(S.contains("Y"))
                    {
                         Radicale = "01";
                    }
             if(S.contains("U"))
                    {
                         Radicale = "10";
                    }
             if(S.contains("S"))
                    {
                         Radicale = "11";
                    }

        String finish ="";
        String value ="";
        if(numberStr.equalsIgnoreCase("A"))
        {
            value = getjTextField12().getText();
            String post = "1"+Radicale+"00110";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else if(numberStr.equalsIgnoreCase("B"))
        {
            value = getjTextField14().getText();
            String post = "1"+Radicale+"00101";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else if(numberStr.equalsIgnoreCase("D"))
        {
            String value1 = getjTextField12().getText();
            String value2 = getjTextField14().getText();
            value = value1.concat(value2);
            value = String.format("%04d", Integer.parseInt(value));
            String post = "1"+Radicale+"01011";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02s", hexString);
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            String firstTwoChars = "";

            try {
                firstTwoChars = reversedString.substring(0, 2);
            } catch (StringIndexOutOfBoundsException e) {
                
                firstTwoChars = reversedStr.toString(); // Ou une autre valeur de votre choix
            }
            ROM.tableau[cpt][1] = firstTwoChars;
                     cpt++;
        }
        else {
            value =numberStr;
        int z =Integer.parseInt(value,16);
            if (z==0)
            {
                String post = "1"+Radicale+"0100";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            
            }
            else if ((z & 0xFFFFFFF0) == 0) {
                String ss2=Integer.toBinaryString(z);
                String post = "1"+Radicale+ss2;
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }

            // Vérification 7 bits
            else if ((z & 0xFFFFFF80) == 0) {
                String post = "1"+Radicale+"01000";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }

            // Vérification 15 bits
            else if ((z & 0xFFFF8000) == 0) {
                String post = "1"+Radicale+"01001";
            int decimal = Integer.parseInt(post, 2); // Parse binary string to decimal
            String hexString = Integer.toHexString(decimal);
            finish = String.format("%02d", Integer.parseInt(hexString, 16));
            StringBuilder reversedStr = new StringBuilder(finish).reverse();   //chaine katle3 inversee
            String reversedString = reversedStr.toString();
            ROM.tableau[cpt][1] = reversedString;
                     cpt++;
            }        
            else 
            {
                System.out.println("existe pas ce deplacement ");
            }
        }
            
            
            int number = Integer.parseInt(varriable,16);
            System.out.println(varriable);
            int number_X = Integer.parseInt(value,16);
            System.out.println(value);
            int somme = number + number_X;
            String adresse = String.format("%04X", somme);
            int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(adresse))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
            
        }
            
            
        ROM.tableau[cpt][1] = X;
                 cpt++;
                 
       getjTextField14().setText(X);
       boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        //this.getjTextField12().getParent().repaint();
        //this.setVisible(true);
       // super.refresh();
        }
        else if(S.contains("<"))
                {
                    S = S.replace("<", "");
                    String formated = String.format("%2s", S).replace(' ', '0');
                    String dp = gettextdp().getText();
                    dp=dp.concat(formated);
                    System.out.println(dp);
                    dp= String.format("%4s", dp).replace(' ', '0');
                    System.out.println(dp);
                     int i ,k=0;
                String X ="0000";
               for ( i=0 ; i < tab.length ; i++ )
               {
                   if (tab[i][0].equalsIgnoreCase(dp))
                           {
                                k= i ;
                               X = tab[k][1];
                               //continue outer;
                           }

               }
               ROM.tableau[cpt][1] = "D6";
                        cpt++;
               ROM.tableau[cpt][1] = X;
                        cpt++;      
              getjTextField14().setText(X);
              boolean isPositive = (X.compareTo("00") >= 0 && X.compareTo("7F") <= 0);

               if (isPositive) {
                   // Le nombre est positif
                   getFlags().setText("00000000");
               } else {
                   // Le nombre est négatif
                   getFlags().setText("00001000");
               }
                }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%2s", S).replace(' ', '0');
            getjTextField14().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "C6";
                cpt++;
            ROM.tableau[cpt][1] = formated;
                 cpt++;    
        boolean isPositive = (formated.compareTo("00") >= 0 && formated.compareTo("7F") <= 0);

        if (isPositive) {
            // Le nombre est positif
            getFlags().setText("00000000");
        } else {
            // Le nombre est négatif
            getFlags().setText("00001000");
        }
        }
        
         if(getjTextField14().getText().equalsIgnoreCase("00"))
       {
           getFlags().setText("00000100");
       }
    }

    public void LDD(String S) {
        // Chargement de D avec le contenu mémoire
        if (!S.contains("#"))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
        }
        ROM.tableau[cpt][1] = "FC";
                 cpt++;
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;      
        String Y=tab[k+1][1];
       getjTextField12().setText(X);
       getjTextField14().setText(Y);
        }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%2s", S).replace(' ', '0');
            getjTextField14().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "CC";
                 cpt++;
            ROM.tableau[cpt][1] = formated;
                 cpt++; 
        }
    }

    public void LDS(String S) {
        // Chargement de S avec le contenu mémoire
         if (!S.contains("#"))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
        }
        String Y = tab[k+1][1];
        gettexts().setText(X+Y);
        ROM.tableau[cpt][1] = "10";
                 cpt++;
        ROM.tableau[cpt][1] = "FE";
                 cpt++;  
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;      

        }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%2s", S).replace(' ', '0');
            gettexts().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "10";
                 cpt++;
            ROM.tableau[cpt][1] = "CE";
                 cpt++; 
            String A = formated.substring(0, 2); 
            ROM.tableau[cpt][1] = A;
                     cpt++;
            String B = formated.substring(2, 4); 
            ROM.tableau[cpt][1] = B;
                     cpt++;   
        }
    }

    public  void LDU(String S) {
        // Chargement de U avec le contenu mémoire
         if (!S.contains("#"))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
        }
        String Y = tab[k+1][1];
        gettextu().setText(X+Y);
        ROM.tableau[cpt][1] = "FE";
                 cpt++;
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;      
        }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%2s", S).replace(' ', '0');
            gettextu().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "CE";
                 cpt++;
            String A = formated.substring(0, 2); 
            ROM.tableau[cpt][1] = A;
                     cpt++;
            String B = formated.substring(2, 4); 
            ROM.tableau[cpt][1] = B;
                     cpt++;   
        }
    }

    public void LDX(String S) {
        // Chargement de X avec le contenu mémoire
         if (!S.contains("#"))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
        }
        String Y = tab[k+1][1];
        gettextx().setText(X+Y);
        ROM.tableau[cpt][1] = "BE";
                 cpt++;
        String A = S.substring(0, 2).toUpperCase(); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4).toUpperCase(); 
        ROM.tableau[cpt][1] = B;
                 cpt++;      
        }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%4s", S).replace(' ', '0');
            gettextx().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "8E";
                 cpt++;
            String A = formated.substring(0, 2).toUpperCase(); 
            ROM.tableau[cpt][1] = A;
                     cpt++;
            String B = formated.substring(2, 4).toUpperCase(); 
            ROM.tableau[cpt][1] = B;
                     cpt++;    
        }
    }

    public void LDY(String S) {
        // Chargement de Y avec le contenu mémoire
         if (!S.contains("#"))
        {
        int i ,k=0;
         String X ="0000";
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        X = tab[k][1];
                        //continue outer;
                    }
        }
        String Y = tab[k+1][1];
        X.concat(Y);
        X = String.format("%4s", X).replace(' ', '0');
        gettexty().setText(X);
        ROM.tableau[cpt][1] = "10";
                 cpt++;
        ROM.tableau[cpt][1] = "BE";
                 cpt++;
        String A = S.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = S.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;      
        }
        else
        {
            S = S.replace("#", "");
            String formated = String.format("%4s", S).replace(' ', '0');
            gettexty().setText(formated.toUpperCase());
            ROM.tableau[cpt][1] = "10";
                 cpt++;
            ROM.tableau[cpt][1] = "8E";
                 cpt++;
            String A = formated.substring(0, 2).toUpperCase(); 
            ROM.tableau[cpt][1] = A;
                     cpt++;
            String B = formated.substring(2, 4).toUpperCase(); 
            ROM.tableau[cpt][1] = B;
                     cpt++;              
        }
    }

    public void LEAS(String S) {
    // Get the value from the specified address
    int addressValue = Integer.parseInt(S, 16);

    // Update the content of register S with the address value in hexadecimal
    gettexts().setText(Integer.toHexString(addressValue));

    // Repaint and update the interface
    gettexts().getParent().repaint();
   
    }

    public void LEAU(String S) {
        // Chargement de l’adresse effective dans U
        int addressValue = Integer.parseInt(S, 16);

    // Update the content of register S with the address value in hexadecimal
    gettextu().setText(Integer.toHexString(addressValue));

    // Repaint and update the interface
    gettextu().getParent().repaint();
    
    }

    public  void LEAX(String S) {
        // Chargement de l’adresse effective dans X
          int addressValue = Integer.parseInt(S, 16);

    // Update the content of register S with the address value in hexadecimal
    gettextx().setText(Integer.toHexString(addressValue));

    // Repaint and update the interface
    gettextx().getParent().repaint();
    
    }
    

    public  void LEAY(String S) {
        // Chargement de l’adresse effective dans Y
          int addressValue = Integer.parseInt(S, 16);

    // Update the content of register S with the address value in hexadecimal
    gettexty().setText(Integer.toHexString(addressValue));

    // Repaint and update the interface
    gettexty().getParent().repaint();
    
    }

      public  void LSLA() {
        // Décalage logique à gauche de A
    String X = getjTextField12().getText();
    int y = Integer.parseInt(X);
    y=y*2;
    X=Integer.toString(y);
    getjTextField12().setText(X);
    
    
    }

    public  void LSLB() {
        // Décalage logique à gauche de B
       String X = getjTextField14().getText();
    int y = Integer.parseInt(X);
    y=y*2;
    X=Integer.toString(y);
    getjTextField14().setText(X);
    }

    public  void LSL(String S) {
        // Décalage logique à gauche du contenu mémoire
          int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        String M=tab[k][1];
                        int Y = Integer.parseInt(M,16);
                            Y=Y*2;
                        tab[k][1]=Integer.toHexString(Y);
                    }
        }
    
    }

      public  void LSRA() {
        // Décalage logique à droite de A
    String X = getjTextField12().getText();
    int y = Integer.parseInt(X);
    y=(int)y/2;
    X=Integer.toString(y);
    getjTextField12().setText(X);
    
    
    }
    public  void LSRB() {
        // Décalage logique à droite de B
         String X = getjTextField14().getText();
    int y = Integer.parseInt(X);
    y=(int)y/2;
    X=Integer.toString(y);
    getjTextField14().setText(X);
    }

    public  void LSR(String S) {
        // Décalage logique à droite du contenu mémoire
                 int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        String M=tab[k][1];
                        int Y = Integer.parseInt(M,16);
                            Y=Y/2;
                        tab[k][1]=Integer.toHexString(Y);
                    }
        }
    
    }

    public static void MUL() {
        // Multiplication non signée
    }

  public void NEGA() {
    // Complément à deux de A
    String S = getjTextField12().getText();
    int A = Integer.parseInt(S, 16);
   
    // Perform two's complement using the bitwise NOT operator (~)
    int negatedA = (~A) + 1;
    String kk = String.format("%04X", negatedA);
    getjTextField12().setText(kk);
    getjTextField12().getParent().repaint();
   
}


    public  void NEGB() {
        // Complément à deux de B
            String S = getjTextField14().getText();
    int A = Integer.parseInt(S, 16);
     
    // Perform two's complement using the bitwise NOT operator (~)
    int negatedA = (~A) + 1;

    getjTextField14().setText(Integer.toHexString(negatedA));
    getjTextField14().getParent().repaint();
  
    }

    public  void NEG(String S) {
        // Complément à deux du contenu mémoire
                 int i ,k=0;
         
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(S))
                    {
                         k= i ;
                        String M=tab[k][1];
                        int A = Integer.parseInt(M,16);
                            int negatedA = (~A) + 1;
                        tab[k][1]=Integer.toHexString(negatedA);
                    }
        }
    
    }

        // OU logique entre A et le contenu mémoire
 public void ORA(String valueToOR) {
    // Get the value of register A
    String aValue = getjTextField12().getText();
    int A = Integer.parseInt(aValue, 16);

    // Get the value to OR with register A
    int value = Integer.parseInt(valueToOR, 16);

    // Perform the logical OR operation
    int result = A | value;

    // Update the content of register A with the result in hexadecimal
    getjTextField12().setText(Integer.toHexString(result));

    // Repaint and update the interface
    getjTextField12().getParent().repaint();
    
}

    

    public  void ORB(String valueToOR) {
        // OU logique entre B et le contenu mémoire
            String aValue = getjTextField14().getText();
    int A = Integer.parseInt(aValue, 16);

    // Get the value to OR with register A
    int value = Integer.parseInt(valueToOR, 16);

    // Perform the logical OR operation
    int result = A | value;

    // Update the content of register A with the result in hexadecimal
    getjTextField14().setText(Integer.toHexString(result));

    // Repaint and update the interface
    getjTextField14().getParent().repaint();
   
    }

    
    public void ORCC(String S) {
    
    String ccValue = getFlags().getText();
    int CC = Integer.parseInt(ccValue, 16);

    
    int value = Integer.parseInt(S, 16);

    
    int result = CC | value;

  getFlags().setText(Integer.toHexString(result));
   
}



    public void PSHS(String FF) {
    
    int stackAddress = Integer.parseInt(gettexts().getText(), 16) ;
    stackAddress--;
    String hexStackAddress = Integer.toHexString(stackAddress);
    String hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
    if(FF.equalsIgnoreCase("A")){ 
    String y =getjTextField12().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
    }
    else if (FF.equalsIgnoreCase("B"))
    {
        String y =getjTextField14().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
    }
    else if (FF.equalsIgnoreCase("X"))
            {
                stackAddress--;
                 hexStackAddress = Integer.toHexString(stackAddress);
                 hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
                String y = gettextx().getText();
        int i ,k=0;
        String A1 = y.substring(0, 2); 
        String B2 = y.substring(2, 4); 
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                    }
        }  
            }
    else if (FF.equalsIgnoreCase("Y"))
    {
        stackAddress--;
        hexStackAddress = Integer.toHexString(stackAddress);
        hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
        String y = gettexty().getText();
        int i ,k=0;
        String A1 = y.substring(0, 2); 
        String B2 = y.substring(2, 4); 
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                    }
        }  
    }
    else if(FF.equalsIgnoreCase("D"))
    {
        stackAddress--;
        hexStackAddress = Integer.toHexString(stackAddress);
        hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
        String a = getjTextField12().getText();
        String b = getjTextField14().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=a;
                          tab[k+1][1]=b;
                          
                    }
        }
    }
    String kk = String.format("%04X", Integer.valueOf(hexStackAddress));
    gettexts().setText(kk);
    gettexts().getParent().repaint();
    ROM.tableau[cpt][1] = "34";
                     cpt++; 
    ROM.tableau[cpt][1] = "-";
                     cpt++; 
    
}
  


    public  void PSHU() {
        // Empilement de registres sur U
         int stackAddress = Integer.parseInt(gettextu().getText(), 16) ;
    stackAddress--;
    String hexStackAddress = Integer.toHexString(stackAddress);
    String hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
     String y = getjTextField12().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
    
    String kk = String.format("%04X", Integer.valueOf(hexStackAddress));
    gettextu().setText(kk);
    gettextu().getParent().repaint();
    
    }
    
    public void PULS() {
    // Démpilement de registres du U
    int stackAddress = Integer.parseInt(gettexts().getText(), 16) ;
    stackAddress++;
    String hexStackAddress = Integer.toHexString(stackAddress);
    String hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
    String y = getjTextField12().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
    
    String kk = String.format("%04X", Integer.valueOf(hexStackAddress));
    gettexts().setText(kk);
    gettexts().getParent().repaint();
    
    
    
}

    public  void PULU() {
        // Démpilement de registres du U
         int stackAddress = Integer.parseInt(gettextu().getText(), 16) ;
    stackAddress++;
    String hexStackAddress = Integer.toHexString(stackAddress);
    String hexStackAddress1 = String.format("%04X", Integer.valueOf(hexStackAddress));
     String y =getjTextField12().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(hexStackAddress1))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
    
    String kk = String.format("%04X", Integer.valueOf(hexStackAddress));
    gettextu().setText(kk);
    gettextu().getParent().repaint();
    
    }

    public static void ROLA() {
        // Décalage circulaire à gauche de A
    }

    public static void ROLB() {
        // Décalage circulaire à gauche de B
    }

    public static void ROL() {
        // Décalage circulaire à gauche du contenu mémoire
    }

    public static void RORA() {
        // Décalage circulaire à droite de A
    }

    public static void RORB() {
        // Décalage circulaire à droite de B
    }

    public static void ROR() {
        // Décalage circulaire à droite du contenu mémoire
    }

    public static void RTI() {
        // Retour d’interruption
    }

    public static void RTS() {
        // Retour de sous-programme
    }

    public void SBCA(String Y) {
        // Soustraction du contenu mémoire de A avec retenue
         String X = getjTextField12().getText();
    int y = Integer.parseInt(Y,16);
    int x = Integer.parseInt(X,16);
    int somme = x - y;
    int zz = 0 , ww=0 ;
    if (somme < 0) 
    {
        zz=1 ; // Dépassement de 4 bits
    }
    if (somme < 255) {
        ww=1; // Dépassement de 8 bits
    } 
    if(zz==1)
    {
        getFlags().setText("00100000"); 
    }
    else if (ww==1)
    {
        getFlags().setText("00000001"); 
    }
    else if (zz==1 && ww==1)
    {
        getFlags().setText("00100001"); 
    }
    else
    {
        getFlags().setText("00000000"); 
    }
    String k = Integer.toHexString(somme).toUpperCase();
    String formattee = String.format("%2s", k.substring(0, 2)).replace(' ', '0');
    getjTextField12().setText(formattee);
    

    }

    public void SBCB(String Y) {
    // Soustraction du contenu mémoire de B avec retenue
     String X = getjTextField14().getText();
    int y = Integer.parseInt(Y,16);
    int x = Integer.parseInt(X,16);
    int resultat = x - y;
    int zz = 0 , ww=0 ;
    if (resultat < 0) 
    {
        zz=1 ; // Dépassement de 4 bits
    }
    if (resultat < 255) {
        ww=1; // Dépassement de 8 bits
    } 
    if(zz==1)
    {
        getFlags().setText("00100000"); 
    }
    else if (ww==1)
    {
        getFlags().setText("00000001"); 
    }
    else if (zz==1 && ww==1)
    {
        getFlags().setText("00100001"); 
    }
    else
    {
        getFlags().setText("00000000"); 
    }
    String k = Integer.toHexString(resultat).toUpperCase();
    String formattee = String.format("%2s", k.substring(0, 2)).replace(' ', '0');
    getjTextField14().setText(formattee);
    }

    public static void SEX() {
        // Extension de signe de l’accumulateur B à A
    }

    public void STA(String x) {
        // Stockage de A dans la cellule mémoire
        String y = getjTextField12().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }
        ROM.tableau[cpt][1] = "B7";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
       // this.getjTextField12().getParent().repaint();
     //  super.refresh();
    }
    

    
    public void STB(String x) {
        // Stockage de B dans la cellule mémoire
         String y = getjTextField14().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=y;
                        //continue outer;
                    }
        }        
        ROM.tableau[cpt][1] = "F7";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void STD(String x) {
        // Stockage de D dans la cellule mémoire
        String a = getjTextField12().getText();
        String b = getjTextField14().getText();
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=a;
                          tab[k+1][1]=b;
                          
                    }
        }
        ROM.tableau[cpt][1] = "FD";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void STS(String x) {
        String y = gettexts().getText();
        int i ,k=0;
        String A1 = y.substring(0, 2); 
        String B2 = y.substring(2, 4); 
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                        //continue outer;
                    }
        }        
        ROM.tableau[cpt][1] = "10";
                 cpt++;
        ROM.tableau[cpt][1] = "FF";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void STU(String x) {
        // Stockage de U dans la cellule mémoire
         String y = gettextu().getText();
         String A1 = y.substring(0, 2); 
         String B2 = y.substring(2, 4); 
        int i ,k=0;
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                        //continue outer;
                    }
        }        
        ROM.tableau[cpt][1] = "FF";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void STX(String x) {
        // Stockage de X dans la cellule mémoire
        String y = gettextx().getText();
        int i ,k=0;
        String A1 = y.substring(0, 2); 
        String B2 = y.substring(2, 4); 
        for ( i=0 ; i < tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                    }
        }        
        ROM.tableau[cpt][1] = "BF";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void STY(String x) {
        // Stockage de Y dans la cellule mémoire
        String y = gettexty().getText();
        String A1 = y.substring(0, 2); 
        String B2 = y.substring(2, 4); 
        int i=0 , k=0 ;
        for (i=0 ; i< tab.length ; i++ )
        {
            if (tab[i][0].equalsIgnoreCase(x))
                    {
                          k= i ;
                          tab[k][1]=A1;
                          tab[k+1][1]=B2;
                    }
        }
        ROM.tableau[cpt][1] = "10";
                 cpt++;
        ROM.tableau[cpt][1] = "BF";
                 cpt++;
        String A = x.substring(0, 2); 
        ROM.tableau[cpt][1] = A;
                 cpt++;
        String B = x.substring(2, 4); 
        ROM.tableau[cpt][1] = B;
                 cpt++;
    }

    public void SUBA(String Y) {
        // Soustraction du contenu mémoire de l’accumulateur A
        if(Y.contains("#"))
        {
            Y=Y.replace("#","");
        }
         String X = getjTextField12().getText();
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int mm=x - y;
        mm &=0xFF;
        String l = Integer.toHexString(mm);
        String formattee = String.format("%2s", l).replace(' ', '0');
        getjTextField12().setText(formattee.toUpperCase());
    }

    public void SUBB(String Y) {
        // Soustraction du contenu mémoire de l’accumulateur B
        if(Y.contains("#"))
        {
            Y=Y.replace("#","");
        }
        String X = getjTextField14().getText();
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(X,16);
        int mm=x - y;
        mm &=0xFF;
        String l = Integer.toHexString(mm);
        getjTextField14().setText(l.toUpperCase());
    }

    public void SUBD(String Y) {
        // Soustraction du contenu mémoire de l’accumulateur D
         if(Y.contains("#"))
        {
            Y=Y.replace("#","");
        }
        String X = getjTextField12().getText();
         String Z = getjTextField14().getText();
         String concat = X.concat(Z);
         System.out.println(concat);
        int y = Integer.parseInt(Y,16);
        int x = Integer.parseInt(concat,16);
        int somme = x-y ;
        String k = Integer.toHexString(somme).toUpperCase();
        k = String.format("%04X", Integer.parseInt(k, 16));
        String A = k.substring(0, 2); 
        String B = k.substring(2, 4); 
        getjTextField12().setText(A);
        getjTextField14().setText(B);
    }

    public static void SWI() {
        // Interruption logicielle
    }

    public static void TFR() {
        // Transfert de registres
    }

    public void TSTA() {
        // Test de l’accumulateur A
            String X = getjTextField12().getText();
        int y = Integer.parseInt(X,16);
        if(y==0)
        {
         getFlags().setText("00000100");
        }
        else 
        {
         getFlags().setText("00000000");
        }
    }

    public void TSTB() {
        // Test de l’accumulateur B
      
         String X = getjTextField14().getText();
        int y = Integer.parseInt(X,16);
        if(y==0)
        {
         getFlags().setText("00000100");

        }
        else 
        {
         getFlags().setText("00000000");
        }
    }

    public static void TST() {
        // Test de la case mémoire
    }

    public void NOP() {
        // Aucune opération
        ROM.tableau[cpt][1] = "12";
                 cpt++; 
    }
}
